\newcommand{\TK}[1]{\mask{\textbf{TK:}~#1}{C}}

\def\({\left(\!\left(}
\def\){\right)\!\right)}
\def\llangle{\langle\!\langle}
\def\rrangle{\rangle\!\rangle}
\DeclareMathOperator{\sgn}{sgn}

\newcommand{\Langle}{\llangle}
\newcommand{\Rangle}{\rrangle}

\newcommand{\separator}{\begin{center}$*$~$*$~$*$\end{center}}
\newcommand{\textURL}[1]{\texttt{#1}}

%% Programming Languages

\newcommand{\programminglanguage}[1]{\textsf{#1}}
\newcommand{\commonlisp}{\programminglanguage{Common~Lisp}}
\newcommand{\clang}{\programminglanguage{C}}
\newcommand{\clangkr}{\programminglanguage{K\&R~C}}
\newcommand{\csharp}{\programminglanguage{C}\texttt{\#}}
\newcommand{\cxx}{\programminglanguage{C}\texttt{++}}
\newcommand{\cxxninetyeight}{\cxx\programminglanguage{98}}
\newcommand{\cxxzerothree}{\cxx\programminglanguage{03}}
\newcommand{\cxxeleven}{\cxx\programminglanguage{11}}
\newcommand{\cxxfourteen}{\cxx\programminglanguage{14}}
\newcommand{\cxxseventeen}{\cxx\programminglanguage{17}}
\newcommand{\cxxtwelve}{\cxx\programminglanguage{20}}
\newcommand{\haskell}{\programminglanguage{Haskell}}
\newcommand{\java}{\programminglanguage{Java}}
\newcommand{\lisp}{\programminglanguage{LISP}}
\newcommand{\objectivec}{\programminglanguage{Objective-C}}
\newcommand{\python}{\programminglanguage{Python}}
\newcommand{\ruby}{\programminglanguage{Ruby}}
\newcommand{\scheme}{\programminglanguage{Scheme}}
\newcommand{\swift}{\programminglanguage{Swift}}

%% Leaders and Key Points

\newenvironment{keypoint}{\begin{screen}}{\end{screen}}
\newenvironment{leader}{\begingroup\gt}{\endgroup}
\newenvironment{note}[1]{\begin{boxnote}\begin{center}\textbf{#1}\end{center}}{\end{boxnote}}

%% Keywords

\newcommand{\keyword}[1]{{\underline{\textbf{#1}}}}

%% Inline Codes (like `...` of Markdown doc)

\newcommand{\code}[1]{\texttt{#1}}

%% File name

\newcommand{\filename}[1]{\texttt{#1}}

%% Code Blocks (like ``` ... ``` of Markdown)

\newenvironment{ccode}{\begin{itembox}[r]{\clang}}{\end{itembox}}
\newenvironment{ckrcode}{\begin{itembox}[r]{\clangkr}}{\end{itembox}}
\newenvironment{cxxcode}{\begin{itembox}[r]{\cxx}}{\end{itembox}}
\newenvironment{javacode}{\begin{itembox}[r]{\java}}{\end{itembox}}
\newenvironment{haskellcode}{\begin{itembox}[r]{\haskell}}{\end{itembox}}
\newenvironment{pythoncode}{\begin{itembox}[r]{\python}}{\end{itembox}}
\newenvironment{rubycode}{\begin{itembox}[r]{\ruby}}{\end{itembox}}
\newenvironment{schemecode}{\begin{itembox}[r]{\scheme}}{\end{itembox}}

% Colors

\def\hxDefaultColor{Black}
\def\hxClassColor{Red}
\def\hxTypeColor{Orange}
\def\hxVarColor{NavyBlue}
\def\hxActionColor{PineGreen}
\def\hxKeywordColor{Sepia}
\def\hxMathColor{BlueGreen}

% Constant

\newcommand{\hxConstant}[1]{\textcolor{\hxVarColor}{\mathrm{#1}}}
\newcommand{\hxOtherwise}{\hxConstant{otherwise}}

\newcommand{\hxMathZero}{\textcolor{\hxMathColor}{\O}}

% Var

\newcommand{\hxVar}[1]{\textcolor{\hxVarColor}{#1}}
\newcommand{\hxSpecialVar}[1]{\textcolor{\hxVarColor}{\mathrm{#1}}}

\newcommand{\hxListVar}[1]{\hxVar{#1}_\mathrm{s}}
\newcommand{\hxMaybeVar}[1]{\hxVar{#1}_\mathrm{?}}
\newcommand{\hxEitherVar}[1]{\hxVar{#1}_\mathrm{!}}
\newcommand{\hxContainerVar}[1]{\hxVar{#1}_\star}

% Tupple

\newcommand{\hxTupple}[2]{\left(#1,#2\right)}

% Set (Math)

\newcommand{\hxSet}[1]{\left\{#1\right\}}

% Value constructor

\newcommand{\hxConstValueConstructor}[1]{\textcolor{\hxVarColor}{\mathrm{#1}}}
\newcommand{\hxValueConstructor}[2]{{}_{\hxConstValueConstructor{#1}}{\langle\hxVar{#2}\rangle}}
\newcommand{\hxJustValue}[1]{\hxValueConstructor{Just}{#1}}
\newcommand{\hxListValue}[1]{\left[\hxVar{#1}\right]}

\newcommand{\hxTrue}{\hxConstValueConstructor{True}}
\newcommand{\hxFalse}{\hxConstValueConstructor{False}}
\newcommand{\hxNothing}{\hxConstValueConstructor{\emptyset}}

\newcommand{\hxUnit}{\hxConstValueConstructor{(\,)}}
\newcommand{\hxEmptyList}{\hxConstValueConstructor{[\,]}}

% Empty

\newcommand{\hxPureNothing}{\varnothing}

% Func

\newcommand{\hxFunc}[1]{\hxVar{#1}}
\newcommand{\hxSpecialFunc}[1]{\hxSpecialVar{#1}}

\newcommand{\hxId}{\hxSpecialFunc{id}}

\newcommand{\hxMathFunctor}[1]{\textcolor{\hxMathColor}{\mathfrak{#1}}}
\newcommand{\hxMathId}{\hxMathFunctor{id}}

% Action

\newcommand{\hxAction}[1]{\textcolor{\hxActionColor}{#1}}
\newcommand{\hxSpecialAction}[1]{\textcolor{\hxActionColor}{\textsl{#1}}}

\newcommand{\hxMain}{\hxSpecialAction{main}}

% Type

\newcommand{\hxType}[1]{\textcolor{\hxTypeColor}{\mathbf{#1}}}
\newcommand{\hxSpecialType}[1]{\hxType{#1}}

\newcommand{\hxBool}{\hxSpecialType{Bool}}

% Type constructor

\newcommand{\hxTypeConstructor}[2]{{}^{#1}\Langle#2\Rangle}
\newcommand{\hxListTypeConstructor}[1]{\llbracket#1\rrbracket}

% Type class

\newcommand{\hxTypeClass}[1]{\textcolor{\hxClassColor}{\textsc{#1}}}

\newcommand{\hxEq}{\hxTypeClass{Eq}}
\newcommand{\hxIntegral}{\hxTypeClass{Integral}}
\newcommand{\hxEnum}{\hxTypeClass{Enum}}

% Set class (Math)

\newcommand{\hxMathSetClass}[1]{\textcolor{\hxMathColor}{\mathbb{#1}}}

% Keyword

\newcommand{\hxKeyword}[1]{\textcolor{\hxKeywordColor}{\textsf{#1}}}
\newcommand{\hxKeywordEmph}[1]{\textcolor{\hxKeywordColor}{\textbf{\textsf{#1}}}}
\newcommand{\hxKeywordInDo}[1]{\textcolor{\hxKeywordColor}{\texttt{#1}}}

\newcommand{\hxIf}{\hxKeyword{if}}
\newcommand{\hxNewtype}{\hxKeywordEmph{newtype}}
\newcommand{\hxDoLet}{\hxKeywordInDo{let}}

% Lambda and lambda expression

\newcommand{\hxLambda}{\backslash}
\newcommand{\hxMapsTo}{\mapsto}
\newcommand{\hxLambdaExp}[2]{\hxLambda{#1}\hxMapsTo{#2}}

% Anonymous parameter

\newcommand{\hxAnonParam}{\lozenge}
\newcommand{\hxAnonTypeParam}{\blacklozenge}

% Infix

\newcommand{\hxInfix}[1]{\mathop{\llparenthesis\,#1\,\rrparenthesis}}

% Is type of, Is element of

\newcommand{\hxIsTypeOf}{\mathop{::}}
\newcommand{\hxIsElementOf}{\in}

% Right arrow

\newcommand{\hxRightArrow}{\rightarrow}

% Forall

\newcommand{\hxForall}{\forall}

% Type conversion

\newcommand{\hxConvertFrom}[1]{\vartriangleleft_{#1}}
\newcommand{\hxConvertTo}[1]{{}_{#1}\vartriangleleft}

% Fold

\newcommand{\hxFoldLeft}{\bigcup}
\newcommand{\hxFoldRight}{\bigsqcup}

% Empty

% Operators

\newcommand{\hxCons}{\mathop{:}}
\newcommand{\hxAppend}{\mathop{\#}}

\newcommand{\hxMap}{\times}
\newcommand{\hxMapM}{\boxtimes}
\newcommand{\hxFmap}{\otimes}
\newcommand{\hxAp}{\circledast}

\newcommand{\hxMonadicBind}{\heartsuit}

\newcommand{\hxApply}{\mathop{\textrm{\S}}}
\newcommand{\hxCompose}{\bullet}
\newcommand{\hxMonadicCompose}{\circ}

% ------- for backward compatibility -------

% Colors
\def\hDefaultColor{black}

%% Red
\def\hClassColor{Red}
\def\hTypeColor{Red}
\def\hTypeConstructorColor{Orange}
\def\hSetColor{Red}

%% Green
\def\hActionColor{PineGreen}
\def\hFunctionColor{BlueGreen}
\def\hFunctorColor{BlueGreen}

%% Blue
\def\hVarColor{NavyBlue}

%% Pink
\def\hConstantColor{WildStrawberry}
\def\hValueConstructorColor{WildStrawberry}

%% Brown
\def\hKeywordColor{Sepia}


% Keywords
\newcommand{\hKeyword}[1]{\textcolor{\hKeywordColor}{\textsf{#1}}}
\newcommand{\hKeywordUnderline}[1]{\textcolor{\hKeywordColor}{\textbf{\textsf{#1}}}}
\newcommand{\hVarKeyword}[1]{\textcolor{\hKeywordColor}{\texttt{#1}}}

%% case, of, otherwise
\newcommand{\hCaseKeyword}{\hKeyword{case}}
\newcommand{\hOfKeyword}{\hKeyword{of}}
\DeclareMathOperator{\hCase}{\hCaseKeyword}
\DeclareMathOperator{\hOf}{\hOfKeyword}

%% class, deriving, instance
\newcommand{\hClassKeyword}{\hKeyword{class}}
\newcommand{\hDerivingKeyword}{\hKeyword{deriving}}
\newcommand{\hInstanceKeyword}{\hKeyword{instance}}
\DeclareMathOperator{\hClass}{\hClassKeyword}
\DeclareMathOperator{\hDeriving}{\hDerivingKeyword}
\DeclareMathOperator{\hInstance}{\hInstanceKeyword}

%% do
\newcommand{\hDoKeyword}{\hKeyword{do}}
\DeclareMathOperator{\hDo}{\hDoKeyword}

%% let, in, where
\newcommand{\hLetKeyword}{\hKeyword{let}}
\newcommand{\hDoLetKeyword}{\hVarKeyword{let}}
\newcommand{\hInKeyword}{\hKeyword{in}}
\newcommand{\hWhereKeyword}{\hKeyword{where}}
\DeclareMathOperator{\hLet}{\hLetKeyword}
\DeclareMathOperator{\hDoLet}{\hDoLetKeyword}
\DeclareMathOperator{\hIn}{\hInKeyword}
\DeclareMathOperator{\hWhere}{\hWhereKeyword}

%% if, then, else
\newcommand{\hIfKeyword}{\hKeyword{if}}
\newcommand{\hThenKeyword}{\hKeyword{then}}
\newcommand{\hElseKeyword}{\hKeyword{else}}
\DeclareMathOperator{\hIf}{\hIfKeyword}
\DeclareMathOperator{\hThen}{\hThenKeyword}
\DeclareMathOperator{\hElse}{\hElseKeyword}

%% infix, infixl, infixr
\newcommand{\hInfixKeyword}{\hKeyword{infix}}
\newcommand{\hInfixlKeyword}{\hKeyword{infixl}}
\newcommand{\hInfixrKeyword}{\hKeyword{infixr}}
\DeclareMathOperator{\hInfix}{\hInfixKeyword}
\DeclareMathOperator{\hInfixl}{\hInfixlKeyword}
\DeclareMathOperator{\hInfixr}{\hInfixrKeyword}

%% type, data, newtype
\newcommand{\hTypeKeyword}{\hKeywordUnderline{type}\hKeyword{synonim}}
\newcommand{\hDataKeyword}{\hKeywordUnderline{data}\hKeyword{type}}
\newcommand{\hNewtypeKeyword}{\hKeywordUnderline{newtype}}
\DeclareMathOperator{\hType}{\hTypeKeyword}
\DeclareMathOperator{\hData}{\hDataKeyword}
\DeclareMathOperator{\hNewtype}{\hNewtypeKeyword}

%% Lambda
\newcommand{\hLambda}{\backslash}
\newcommand{\hLambdaArrow}{\mapsto}


% Syntax
\newcommand{\hCaseSyntax}[1]{\hCase#1\hOf}
\newcommand{\hDoSyntax}[1]{\hDo\left\{#1\right\}}
\newcommand{\hIfSyntax}[3]{\hIf#1\hThen#2\hElse#3}
\newcommand{\hLambdaSyntax}[2]{\hLambda#1\hLambdaArrow#2}
\newcommand{\hLetSyntax}[2]{\hLet#1\hIn#2}
\newcommand{\hWhereSyntax}[2]{#1\hWhere#2}


% Constant and Value Constructor
\newcommand{\hConstant}[1]{\textcolor{\hxVarColor}{#1}}
\newcommand{\hSpecialConstant}[1]{\textcolor{\hxVarColor}{\mathrm{#1}}}

%% Empty, Nothing, Zero
\newcommand{\hEmptyList}{\hConstant{[\,]}}
\newcommand{\hNothing}{\hConstant{\emptyset}}
\newcommand{\hPureNothing}{\hConstant{\varnothing}}
\newcommand{\hUnit}{\hConstant{(\,)}}

\newcommand{\hZero}{\hConstant{\O}}

%% True, False
\newcommand{\hTrue}{\hSpecialConstant{True}}
\newcommand{\hFalse}{\hSpecialConstant{False}}

%% otherwise
\newcommand{\hOtherwise}{\hSpecialConstant{otherwise}}

%% String
\newcommand{\hStringLiteral}[1]{\text{#1}}


% Variable
\newcommand{\hVar}[1]{\textcolor{\hxVarColor}{#1}}
\newcommand{\hSpecialVar}[1]{\textcolor{\hxVarColor}{\mathrm{#1}}}


% Anonymous parameter
\newcommand{\hAnonParam}{\diamond}


% Function
\newcommand{\hFunction}[1]{\textcolor{\hxVarColor}{#1}}
\newcommand{\hFunc}[1]{\hFunction{#1}}
\newcommand{\hSpecialFunction}[1]{\mathop{\textcolor{\hxVarColor}{\mathrm{#1}}}}

%% id, sin, cos
\newcommand{\hId}{\hSpecialFunction{id}}
\newcommand{\hSin}{\hSpecialFunction{\sin}}
\newcommand{\hCos}{\hSpecialFunction{\cos}}
\newcommand{\hMax}{\hSpecialFunction{\max}}
\newcommand{\hMin}{\hSpecialFunction{\min}}
\newcommand{\hFact}{\hSpecialFunction{fact}}
\newcommand{\hFactPrime}{\hSpecialFunction{fact'}}
\newcommand{\hNull}{\hSpecialFunction{null}}
\newcommand{\hSucc}{\hSpecialFunction{succ}}
\newcommand{\hPred}{\hSpecialFunction{pred}}
\newcommand{\hTake}{\hSpecialFunction{take}}
\newcommand{\hCurry}{\hSpecialFunction{curry}}
\newcommand{\hUncurry}{\hSpecialFunction{uncurry}}
\newcommand{\hSum}{\hSpecialFunction{sum}}

% Action
\newcommand{\hAction}[1]{\mathop{\textcolor{\hActionColor}{#1}}}
\newcommand{\hSpecialAction}[1]{\mathop{\textcolor{\hActionColor}{\textsl{#1}}}}

%% main, pure, return, print
\newcommand{\hMain}{\hSpecialAction{main}}
\newcommand{\hReturn}{\hSpecialAction{return}}
\newcommand{\hPure}{\hSpecialAction{pure}}


% Functor
\newcommand{\hFunctorWith}[1]{\textcolor{\hFunctorColor}{\mathfrak{#1}}}

%% Id
\newcommand{\hCatId}{\hFunctorWith{id}}


% Type name, Type constructor, Type class, Set
\newcommand{\hTypeName}[1]{\textcolor{\hTypeColor}{\textbf{{#1}}}}
\newcommand{\hSpecialTypeName}[1]{\textcolor{\hTypeColor}{\mathbf{#1}}}
\newcommand{\hTypeConstructor}[1]{\textcolor{\hTypeConstructorColor}{\textbf{\textit{#1}}}}
\newcommand{\hSpecialTypeConstructor}[1]{\textcolor{\hTypeConstructorColor}{\textbf{{#1}}}}
\newcommand{\hTypeClass}[1]{\textcolor{\hClassColor}{\textsc{#1}}}
\newcommand{\hSpecialTypeClass}[1]{\textcolor{\hClassColor}{\textsc{#1}}}
\newcommand{\hSet}[1]{\textcolor{\hSetColor}{\mathbb{#1}}}

%% Bool, Int, Integer, Float, Double, Char, String
\newcommand{\hBool}{\hSpecialTypeName{Bool}}
\newcommand{\hInt}{\hSpecialTypeName{Int}}
\newcommand{\hInteger}{\hSpecialTypeName{Integer}}
\newcommand{\hFloat}{\hSpecialTypeName{Float}}
\newcommand{\hDouble}{\hSpecialTypeName{Double}}
\newcommand{\hChar}{\hSpecialTypeName{Char}}
\newcommand{\hString}{\hSpecialTypeName{String}}

%% List, Maybe, Either
\newcommand{\hList}{\hSpecialTypeConstructor{List}}
\newcommand{\hMaybe}{\hSpecialTypeConstructor{Maybe}}
\newcommand{\hEither}{\hSpecialTypeConstructor{Either}}

%% Eq, Ord, Integral
\newcommand{\hEq}{\hSpecialTypeClass{Eq}}
\newcommand{\hOrd}{\hSpecialTypeClass{Ord}}
\newcommand{\hIntegral}{\hSpecialTypeClass{Integral}}
\newcommand{\hNum}{\hSpecialTypeClass{Num}}
\newcommand{\hReal}{\hSpecialTypeClass{Real}}
\newcommand{\hEnum}{\hSpecialTypeClass{Enum}}
\newcommand{\hFunctor}{\hSpecialTypeClass{Functor}}


% Type construct syntax
\newcommand{\hTypeConstruct}[2]{{}^{#1}\langle#2\rangle}

%% List, Maybe, Either
\newcommand{\hListConstruct}[1]{[#1]}
\newcommand{\hVarListConstruct}[1]{\hTypeConstruct{\hList}{#1}}
\newcommand{\hMaybeConstruct}[1]{\hTypeConstruct{\hMaybe}{#1}}
\newcommand{\hEitherConstruct}[2]{\hTypeConstruct{\hEither}{#1\;#2}}


% Value constructor
\newcommand{\hValueConstructor}[1]{\textcolor{\hValueConstructorColor}{#1}}
\newcommand{\hSpecialValueConstructor}[1]{\textcolor{\hValueConstructorColor}{\mathrm{#1}}}

%% Just, Left, Right, IO
\newcommand{\hJustWith}[1]{{}_{\hSpecialValueConstructor{Just}}[\![#1]\!]}
\newcommand{\hLeftWith}[1]{{}_{\hSpecialValueConstructor{Left}}[\![#1]\!]}
\newcommand{\hRightWith}[1]{{}_{\hSpecialValueConstructor{Right}}[\![#1]\!]}
\newcommand{\hIOWith}[1]{{}_{\hSpecialValueConstructor{IO}}[\![#1]\!]}

%% List
\newcommand{\hListWith}[1]{[#1]}

%% Tuple
\newcommand{\hSingleTuppleWith}[1]{\left(#1\right)}
\newcommand{\hPairWith}[2]{\begin{pmatrix}#1\\#2\end{pmatrix}}
\newcommand{\hTripleWith}[3]{\begin{pmatrix}#1\\#2\\#3\end{pmatrix}}

% Decoration
\newcommand{\hListDecor}[1]{{#1}_\textrm{s}}
\newcommand{\hListVar}[1]{\hListDecor{\hVar{#1}}}
\newcommand{\hMaybeDecor}[1]{{#1}_\textrm{?}}
\newcommand{\hMaybeVar}[1]{\hMaybeDecor{\hVar{#1}}}
\newcommand{\hEitherDecor}[1]{{#1}_\textrm{!}}
\newcommand{\hEitherVar}[1]{\hEitherDecor{\hVar{#1}}}
\newcommand{\hAnyContextDecor}[1]{{#1}_\star}
\newcommand{\hAnyContextVar}[1]{\hAnyContextDecor{\hVar{#1}}}


% Forall
\newcommand{\hForall}[1]{\forall#1.}


% Infix
\newcommand{\hInfixWith}[1]{\mathop{\llparenthesis\,#1\,\rrparenthesis}}


% Genus
\newcommand{\hGenus}{\bigstar}


% Operator
%% Unary Op
\DeclareMathOperator{\hJoinList}{\flat}

%% Any Bin Op
\DeclareMathOperator{\hAnyBinOp}{\blacksquare}

%% Apply
\DeclareMathOperator{\hApply}{\S}
\DeclareMathOperator{\hFunctorApply}{\odot}

%% Map, Bind
\DeclareMathOperator{\hMap}{\times}
\DeclareMathOperator{\hMapM}{\boxtimes}
\DeclareMathOperator{\hMaybeMap}{\otimes}
\DeclareMathOperator{\hFunctorMap}{\otimes}
\DeclareMathOperator{\hApplicativeMap}{\circledast}
\DeclareMathOperator{\hMonadicBind}{\star}
\DeclareMathOperator{\hRightMonadicBind}{\xrightarrow{\star}}
\DeclareMathOperator{\hRightMonadicBindIgnore}{\twoheadrightarrow}

%% Compose
\DeclareMathOperator{\hCompose}{\bullet}%{\centerdot}
\DeclareMathOperator{\hMonadicCompose}{\circ}
\DeclareMathOperator{\hCategoryCompose}{\bullet}

%% Set
\DeclareMathOperator{\hIsTypeOf}{:\!:}
\DeclareMathOperator{\hIsElementOf}{\in}
\DeclareMathOperator{\hHasElementsOf}{\supset}
\DeclareMathOperator{\hAndThen}{\Rightarrow}

%% Equal, Arraw
\DeclareMathOperator{\hIfEq}{\equiv}
\DeclareMathOperator{\hLetEq}{\triangleq}
\DeclareMathOperator{\hIfSo}{\dashrightarrow}
\DeclareMathOperator{\hFunctionArrow}{\rightarrow}
\DeclareMathOperator{\hDoArrow}{\leftharpoonup}

%% List op
\DeclareMathOperator{\hMemberAt}{!!}
\DeclareMathOperator{\hAppend}{\#}
\DeclareMathOperator{\hCons}{:}

%% List comprehension
\DeclareMathOperator{\hListComprehension}{\shortmid}
\DeclareMathOperator{\hFrom}{\in}

%% Other binary
\DeclareMathOperator{\hValueConstructorOr}{\curlyvee}


%% And, Or
\DeclareMathOperator{\hLogicalAnd}{\wedge}
\DeclareMathOperator{\hLogicalOr}{\vee}


%% Fold
\DeclareMathOperator*{\hFold}{\bigcup}
\DeclareMathOperator*{\hFoldRight}{\bigsqcup}


% Type conversion
\newcommand{\hFromClass}[1]{\vartriangleleft_{#1}}
\newcommand{\hToClass}[1]{{}_{#1}\vartriangleleft}

%% From Integral
\DeclareMathOperator{\hFromIntegral}{\hFromClass{\hIntegral}}

%% To Enum
\DeclareMathOperator{\hToEnum}{\hToClass{\hEnum}}

% Guard
\newcommand{\hGuard}[1]{\mathop{\mid_{#1}}}


% Arrows
\newcommand{\hArrowArrow}{\rightsquigarrow}
\newcommand{\hArrowAnd}{\barwedge}
\newcommand{\hArrowOr}{\veebar}


% As
\DeclareMathOperator{\hAs}{@}
\newcommand{\hAsSyntax}[2]{#1\hAs#2}

% 【g,p】
% https://tex.stackexchange.com/questions/408066/symbol-for-anamorphism
